
#line 3 "uclex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 161
#define YY_END_OF_BUFFER 162
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[743] =
    {   0,
        0,    0,  154,  154,    0,    0,    0,    0,    0,    0,
        0,    0,  162,  160,  150,  159,  125,  160,  148,  160,
      160,  160,  160,  160,  160,  160,  129,  129,  160,  160,
      160,  160,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  160,  154,  155,  156,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  150,  132,    0,  127,    0,
      148,  148,  149,  148,  148,  148,  148,  142,  123,  140,
      138,  139,  135,    0,  153,  151,  141,  129,    0,  136,

      137,  133,  131,  134,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,    5,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,    1,    7,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
        9,  126,  126,  126,  126,  126,  126,  124,  154,  155,
      156,  157,  156,  158,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,   90,  126,   89,  126,
      126,  126,  126,  126,   92,  126,  126,  126,  126,  126,
      126,   91,  126,  126,  126,  126,  126,  128,    0,  127,

        0,  148,  148,  148,  148,  148,    0,  151,  152,  130,
      126,   36,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,    6,  126,  126,  126,
      126,   14,  126,  126,  126,  126,  126,   27,  126,  126,
      126,  126,   34,  126,  126,  126,  126,  126,  126,  126,
       10,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
       83,  126,  126,  126,  126,   80,  126,  126,  126,  126,
      126,  126,  126,   57,  126,  126,  126,  126,  126,  126,
      126,  126,  126,   77,  126,  126,  126,  126,  126,  126,

      126,  126,  126,  126,  126,  126,  126,  126,  126,  128,
      148,  148,  148,  148,  148,    0,  126,  126,  126,   16,
       24,   15,  126,  126,  126,  126,  126,    2,   20,  126,
      126,  126,  126,   49,   37,  126,   48,   17,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,   22,  126,   11,  126,    8,  126,  126,  126,  126,
      126,  126,  126,   75,  126,  126,  126,  126,   87,  126,
      126,   78,  126,  126,  126,  126,  126,  126,  126,  126,
       82,   59,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,   66,  126,  126,  126,  126,  126,  126,

      126,  126,   73,  126,   65,  126,   88,  126,  126,  126,
      148,  148,  148,  148,  148,    0,   50,   42,   12,   26,
       18,  126,  126,  126,   46,  126,   23,  126,   45,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,   43,  126,    4,  126,  126,   84,  126,  126,  126,
      126,  126,  126,   72,  126,  126,  126,  126,  126,   68,
       69,  126,  126,  126,   74,  126,  126,   85,  126,  126,
      126,  126,   96,  126,   63,  126,  126,  126,  126,  126,
      126,   86,  126,  126,  126,  126,  126,   55,  126,   54,
      148,  149,  148,  148,  148,  148,  148,    0,  126,  126,

       28,   21,   47,  126,  126,   33,   35,  126,    3,  126,
       41,   25,   19,   13,   29,  126,  126,   52,   81,  126,
      104,  126,  126,  126,  126,  126,  126,   21,   60,  126,
      126,  126,  126,   58,  126,  126,  126,  126,  126,   64,
      126,   70,  126,  126,  126,  126,   76,  126,  126,  126,
      126,  126,  126,    0,    0,  148,  143,  148,  148,  148,
      146,  148,  148,    0,  126,   30,   39,   44,  126,  126,
      126,   53,  126,  126,  126,  107,  126,   67,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  103,  126,  126,  126,  126,  126,  126,

      126,   79,  126,    0,  143,  148,  148,  148,    0,   31,
       40,  126,  126,  126,  126,  126,  108,   62,  126,  126,
      126,  105,  126,  126,  126,  126,  126,   71,   97,  100,
       98,  101,  126,  106,  126,  126,   93,  126,  126,  126,
      126,   56,  148,  148,  148,   51,  126,  126,  126,  126,
      126,  109,  126,  126,  126,  126,  126,  126,  126,  126,
       61,  126,  126,   95,  126,   99,  102,  148,  148,  148,
      145,  148,  149,  148,   38,  126,  112,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  110,  126,  126,   94,
      148,    0,    0,  148,  144,   32,  126,  111,  126,  126,

      118,  126,  126,  126,  126,  126,  126,  148,    0,  144,
      126,  126,  126,  126,  119,  126,  126,  115,  122,  148,
      126,  126,  126,  126,  117,  114,  148,  113,  126,  126,
      126,  148,  121,  126,  126,  148,  147,  148,  126,  120,
      116,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    1,    8,    9,    1,    1,
        1,   10,   11,    1,   12,   13,   14,   15,   16,   17,
       18,   18,   18,   18,   18,   18,   18,   19,    1,   20,
       21,   22,    1,    1,   23,   23,   23,   23,   23,   23,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
        1,   25,    1,    1,   26,    1,   27,   28,   29,   30,

       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   24,   43,   44,   45,   46,   47,   48,   49,
       50,   24,    1,   51,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[52] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    3,    3,    3,    3,    1,    1,
        1,    1,    3,    4,    1,    4,    3,    3,    3,    3,
        3,    3,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        1
    } ;

static yyconst flex_int16_t yy_base[763] =
    {   0,
        0,    0,   49,   50,   13,   14,   34,    0,   41,   51,
      959,  958,  985,  988,   79,  988,  963,   50,   82,  962,
      973,  960,  959,   65,  938,   78,   78,   85,  959,   69,
      956,  955,    0,   76,  925,   78,   66,   83,   83,   81,
       90,   94,  933,   98,  942,   97,  108,  101,  928,  111,
      106,  920,  967,  988,  144,  941,  121,  132,  118,  140,
      132,  144,  145,  160,  928,  110,  165,  166,  122,  167,
      188,  197,   48,  200,   68,  181,  988,  151,  957,  200,
      963,  237,  988,  172,  218,  202,  209,  988,  988,  988,
      988,  988,  988,  922,  988,  961,  988,  231,    0,  988,

      988,  988,  988,  988,    0,  922,  932,  916,  925,  914,
      914,  930,  929,  915,  172,    0,  910,  907,  921,  906,
      912,  906,  910,  902,  916,  899,    0,  899,  912,  902,
      897,  900,  212,  218,  899,  888,  894,  208,  901,  906,
        0,  888,  902,  889,  896,  895,  884,  988,  925,  988,
      255,  988,  256,  988,  891,  899,  880,  879,  896,  874,
      235,  881,  891,  236,  875,  884,  872,  238,  232,  889,
      870,  192,  883,  880,  879,  867,  234,  243,    0,  867,
      878,  873,  257,  863,  861,  856,  859,  872,  248,  871,
      262,  866,  865,  172,  868,  858,  866,  988,  265,  285,

      294,  305,  205,  289,  295,  300,  861,  892,  988,    0,
      851,    0,  862,  865,  860,  859,  846,  844,  262,  860,
      855,  854,  845,  843,  851,  837,    0,  853,  838,  847,
      834,    0,  837,  842,  830,  827,  827,    0,  830,  828,
      823,  842,    0,  832,  821,  269,  820,  827,  832,  819,
        0,  831,  822,  825,  827,  815,  815,  828,  809,  818,
      818,  813,  280,  269,  812,  820,  803,  816,  815,  814,
        0,  809,  812,  803,  812,    0,  809,  805,  803,  802,
      793,  790,  807,    0,  273,  788,  785,  787,  297,  799,
      299,  798,  797,    0,  782,  795,  794,  789,  778,  791,

      289,  779,  296,  775,  774,  773,  790,  288,  789,  311,
      341,  334,  335,  336,  345,  782,  769,  770,  768,    0,
        0,    0,  767,  765,  778,  762,  762,    0,    0,  761,
      762,  773,  770,    0,    0,  758,    0,    0,  774,  755,
      768,  751,  756,  753,  751,  752,  758,  752,  762,  761,
      745,    0,  762,    0,  756,    0,  757,  754,  741,  754,
      755,  741,  749,    0,  753,  743,  746,  745,    0,  732,
      731,    0,  729,  746,  740,  736,  731,  723,  738,  737,
        0,    0,  727,  737,  729,  712,  726,  729,  725,  708,
      730,  711,  712,    0,  721,  718,  710,  706,  721,  715,

      719,  717,  720,  309,    0,  711,    0,  707,  708,  705,
      347,  348,  352,  349,  354,  706,    0,    0,    0,    0,
        0,  697,  701,  707,    0,  697,    0,  692,    0,  702,
      703,  703,  701,  691,  690,  700,  683,  698,  693,  680,
      690,    0,  694,    0,  677,  714,    0,  683,  676,  685,
      687,  317,  676,    0,  675,  683,  673,  678,  681,    0,
        0,  675,  669,  682,    0,  662,  668,    0,  679,  663,
      677,  676,    0,  656,    0,  657,  666,  658,  662,  662,
      669,    0,  660,  658,  321,  661,  660,    0,  650,    0,
      359,  683,  685,  357,  365,  366,  368,  647,  642,  640,

        0,    0,    0,  653,  639,    0,    0,  638,    0,  638,
        0,    0,    0,    0,    0,  646,  672,  988,    0,  652,
        0,  651,  630,  633,  628,  628,  645,  644,    0,  643,
      629,  633,  637,    0,  640,  340,  619,  361,  365,    0,
      633,    0,  630,  622,  626,  630,    0,  619,  627,  622,
      630,  612,  608,  647,  649,  648,  988,  358,  647,  387,
      988,  370,  389,  622,  617,    0,    0,    0,  616,  611,
      604,  988,  347,  609,  598,    0,  611,    0,  603,  602,
      600,  605,  597,  609,  605,  593,  602,  588,  597,  596,
      595,  594,  540,    0,  514,  506,  518,  510,  510,  508,

      377,    0,  509,  532,  988,  395,  397,  406,  496,    0,
        0,  491,  497,  375,  500,  490,    0,    0,  503,  502,
      500,    0,  493,  486,  490,  475,  488,    0,    0,    0,
        0,    0,  468,    0,  479,  472,    0,  465,  471,  470,
      469,    0,  407,  411,  412,  988,  457,  472,  457,  458,
      471,    0,  467,  467,  462,  461,  459,  446,  438,  439,
        0,  455,  453,    0,  430,    0,    0,  408,  471,  417,
      988,  418,  467,  469,    0,  440,    0,  425,  426,  441,
      424,  435,  435,  429,  434,  418,    0,  418,  425,    0,
      423,  451,  453,  452,  988,    0,  412,    0,  414,  417,

        0,  423,  418,  415,  420,  406,  414,  425,  441,  988,
      416,  415,  396,  400,    0,  406,  406,    0,    0,  414,
      405,  401,  402,  405,    0,    0,  461,    0,  400,  387,
      396,  491,    0,  387,  212,  206,  988,  521,  119,    0,
        0,  988,  553,  557,  561,  563,  567,  571,  575,  579,
       64,  583,  587,  591,  595,  599,  603,  607,  611,  615,
      619,  623
    } ;

static yyconst flex_int16_t yy_def[763] =
    {   0,
      742,    1,  743,  743,    1,    1,    1,    7,    1,    1,
        1,    1,  742,  742,  742,  742,  742,  744,  745,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  742,  747,  742,  748,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  742,  742,  744,  742,  749,
      745,  745,  742,  745,  745,  745,  745,  742,  742,  742,
      742,  742,  742,  742,  742,  750,  742,  742,  751,  742,

      742,  742,  742,  742,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  742,  747,  742,
      748,  742,  748,  742,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  742,  744,  744,

      749,  745,  745,  745,  745,  745,  742,  750,  742,  751,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,

      746,  746,  746,  746,  746,  746,  746,  746,  746,  744,
      745,  745,  745,  745,  745,  742,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,

      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      752,  745,  745,  745,  745,  742,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      752,  753,  754,  745,  755,  745,  745,  742,  746,  746,

      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  742,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  753,  756,  754,  742,  745,  755,  755,
      742,  745,  745,  742,  746,  746,  746,  746,  746,  746,
      746,  742,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,

      746,  746,  746,  756,  742,  745,  745,  745,  742,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  745,  757,  758,  742,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  745,  757,  757,
      742,  758,  759,  760,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      745,  759,  761,  760,  742,  746,  746,  746,  746,  746,

      746,  746,  746,  746,  746,  746,  746,  745,  761,  742,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  745,
      746,  746,  746,  746,  746,  746,  745,  746,  746,  746,
      746,  762,  746,  746,  746,  762,  742,  762,  746,  746,
      746,    0,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742
    } ;

static yyconst flex_int16_t yy_nxt[1040] =
    {   0,
       14,   15,   16,   15,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   28,   28,   29,   30,
       31,   32,   33,   33,   14,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   33,   33,   43,   44,   45,
       33,   33,   46,   47,   48,   49,   50,   51,   33,   33,
       52,   54,   54,   56,   56,   79,   57,   57,   55,   55,
       58,   59,   60,   61,   62,   63,  210,   64,   73,   74,
       65,   66,   67,   68,   80,   69,   70,   71,   73,   74,
       76,   72,   76,   82,   83,   92,   93,   95,  101,  102,
      195,   96,   98,   98,   98,   98,  115,  110,   97,   98,

       98,   98,   98,  106,  111,  107,  116,  108,   84,  121,
      197,  112,  123,  109,   85,  113,   86,  110,  114,   87,
      117,  124,  118,  122,  125,  127,   99,  134,  131,  119,
      126,  120,  132,  128,  136,  140,  137,  144,  129,  146,
      147,  141,  135,  142,  174,  741,  152,  136,  180,  137,
      130,  145,  138,  153,  156,  139,   79,  154,  160,  106,
      157,  107,  164,  108,  181,  138,  161,  110,  139,  109,
      165,  168,  116,  112,   83,   80,  158,  113,  159,  169,
      162,  117,   76,  118,   76,  122,  171,  170,  166,  163,
      119,  175,  167,  182,  172,  131,  177,  183,  305,  132,

      126,  184,   78,  220,   83,  200,  178,   83,  737,  221,
      176,   83,  135,  179,  136,  306,  137,  203,  185,  186,
       83,  230,  187,  193,  201,  188,  111,  194,  189,  190,
      146,  147,  191,  112,  245,  192,  276,  113,   82,   83,
      196,  205,  740,  206,  204,   98,   98,   98,   98,  312,
      246,  202,  202,  202,  202,  237,  239,  152,  152,  238,
      281,  240,  241,  261,  742,  153,  270,  220,  742,  154,
       79,  272,  262,  221,  273,  226,  283,  237,  263,  266,
      271,  238,  282,  289,  284,  285,  297,  298,  301,   80,
       79,   83,  302,  299,  310,  239,   78,   83,  290,  200,

      291,  241,   83,  348,  303,  324,  311,   83,  325,   80,
      321,  384,  324,  366,  349,  325,   79,  385,  201,  202,
      202,  202,  202,  314,  365,  389,  390,  313,  402,  392,
      404,  324,  409,  347,  325,   80,   83,   83,   83,  315,
      343,  349,  311,   83,  393,  486,  411,   83,  439,  492,
       83,   83,  493,  495,   83,  497,   83,  523,  549,   83,
       83,  492,  524,  550,  493,  413,  560,  561,   83,  497,
       83,  586,   83,  414,  412,  415,  589,  590,  614,  587,
      591,  592,  563,  563,  563,  563,  615,  494,  560,  561,
      608,   83,  640,  641,  496,  562,  606,   83,  644,   83,

      607,  649,  558,  563,  563,  563,  563,  608,   83,   83,
       83,  645,  670,  671,  673,  650,   83,  674,  670,  671,
      673,  739,  643,  674,  708,   83,  708,   83,  735,  734,
      733,  731,  730,  729,  728,  726,  725,  668,  724,  720,
      723,  722,  721,  710,  719,  718,  717,  716,  715,  714,
      691,  713,  712,  711,  695,  710,  693,  707,  706,  705,
      704,  703,  727,   83,  702,  701,  700,  699,  698,  697,
      696,  695,  693,  671,  690,  732,  732,  732,  732,  689,
      688,  687,  686,  732,  685,  684,  683,  732,  732,  732,
      732,  732,  732,  737,  682,  681,  680,  679,  678,  677,

      676,  675,  667,  666,  665,  738,  738,  738,  738,  664,
      663,  662,  661,  738,  660,  659,  658,  738,  738,  738,
      738,  738,  738,  737,  657,  656,  655,  654,  653,  652,
      651,  648,  647,  646,  605,  738,  738,  738,  738,  642,
      639,  638,  637,  738,  636,  635,  634,  738,  738,  738,
      738,  738,  738,   53,   53,   53,   53,   78,   78,   78,
       78,   81,   81,   81,   81,  105,  105,  149,  633,  149,
      149,  151,  151,  151,  151,  199,  199,  199,  199,  208,
      208,  208,  208,  491,  491,  491,  491,  554,  554,  554,
      554,  556,  556,  556,  556,  559,  559,  559,  559,  604,

      604,  604,  604,  669,  669,  669,  669,  672,  672,  672,
      672,  692,  692,  692,  692,  694,  694,  694,  694,  709,
      709,  709,  709,  736,  736,  736,  736,  632,  631,  630,
      629,  628,  627,  626,  625,  624,  623,  622,  621,  620,
      619,  618,  617,  616,  613,  612,  611,  610,  609,  561,
      557,  605,  555,  603,  602,  601,  600,  599,  598,  597,
      596,  595,  594,  593,  588,  585,  584,  583,  582,  581,
      580,  579,  578,  577,  576,  575,  574,  573,  572,  571,
      570,  569,  568,  567,  566,  565,  564,  557,  555,  553,
      552,  551,  548,  547,  546,  545,  544,  543,  542,  541,

      540,  539,  538,  537,  536,  535,  534,  533,  532,  531,
      530,  529,  528,  527,  526,  525,  522,  521,  520,  519,
      518,  517,  516,  515,  514,  513,  512,  511,  510,  509,
      508,  507,  506,  505,  504,  503,  502,  501,  500,  499,
      498,  490,  489,  488,  487,  485,  484,  483,  482,  481,
      480,  479,  478,  477,  476,  475,  474,  473,  472,  471,
      470,  469,  468,  467,  466,  465,  464,  463,  462,  461,
      460,  459,  458,  457,  456,  455,  454,  453,  452,  451,
      450,  449,  448,  447,  446,  445,  444,  443,  442,  441,
      440,  439,  438,  437,  436,  435,  434,  433,  432,  431,

      430,  429,  428,  427,  426,  425,  424,  423,  422,  421,
      420,  419,  418,  417,  416,  410,  408,  407,  406,  405,
      403,  401,  400,  399,  398,  397,  396,  395,  394,  391,
      388,  387,  386,  383,  382,  381,  380,  379,  378,  377,
      376,  375,  374,  373,  372,  371,  370,  369,  368,  367,
      364,  363,  362,  361,  360,  359,  358,  357,  356,  355,
      354,  353,  352,  351,  350,  347,  346,  345,  344,  343,
      342,  341,  340,  339,  338,  337,  336,  335,  334,  333,
      332,  331,  330,  329,  328,  327,  326,  323,  322,  321,
      320,  319,  318,  317,  209,  316,  309,  308,  307,  304,

      247,  300,  296,  295,  294,  293,  292,  288,  287,  286,
      280,  279,  278,  277,  275,  274,  269,  268,  267,  265,
      264,  260,  259,  258,  257,  256,  255,  150,  254,  253,
      252,  251,  250,  249,  248,  247,  244,  243,  242,  236,
      235,  234,  233,  232,  231,  230,  229,  228,  227,  226,
      225,  224,  223,  222,  219,  218,  217,  216,  215,  214,
      213,  212,  211,  209,  207,   83,  198,  173,  155,  150,
      148,  143,  133,  130,  110,  104,  103,  100,   94,   91,
       90,   89,   88,   77,  742,   75,   75,   13,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,

      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742
    } ;

static yyconst flex_int16_t yy_chk[1040] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    4,    5,    6,   18,    5,    6,    3,    4,
        7,    7,    7,    7,    7,    7,  751,    7,    9,    9,
        7,    7,    7,    7,   18,    7,    7,    7,   10,   10,
       15,    7,   15,   19,   19,   24,   24,   26,   30,   30,
       73,   26,   27,   27,   27,   27,   37,   73,   26,   28,

       28,   28,   28,   34,   36,   34,   37,   34,   19,   39,
       75,   36,   40,   34,   19,   36,   19,   75,   36,   19,
       38,   40,   38,   39,   41,   42,   27,   46,   44,   38,
       41,   38,   44,   42,   47,   48,   47,   50,   42,   51,
       51,   48,   46,   48,   66,  739,   55,   57,   69,   57,
       66,   50,   47,   55,   57,   47,   78,   55,   59,   58,
       58,   58,   61,   58,   69,   57,   60,   59,   57,   58,
       62,   63,   61,   60,   84,   78,   58,   60,   58,   63,
       60,   62,   76,   62,   76,   63,   64,   63,   62,   60,
       62,   67,   62,   70,   64,   67,   68,   70,  194,   67,

       64,   70,   80,  115,   86,   80,   68,  203,  736,  115,
       67,   87,   70,   68,   71,  194,   71,   84,   71,   71,
       85,  172,   71,   72,   80,   71,   74,   72,   71,   71,
       72,   72,   71,   74,  138,   71,  172,   74,   82,   82,
       74,   86,  735,   87,   85,   98,   98,   98,   98,  203,
      138,   82,   82,   82,   82,  133,  134,  151,  153,  133,
      177,  134,  134,  161,  151,  153,  168,  164,  151,  153,
      199,  169,  161,  164,  169,  168,  178,  177,  161,  164,
      168,  177,  177,  183,  178,  178,  189,  189,  191,  199,
      200,  204,  191,  189,  200,  183,  201,  205,  183,  201,

      183,  183,  206,  246,  191,  219,  202,  202,  219,  200,
      263,  285,  264,  264,  246,  264,  310,  285,  201,  202,
      202,  202,  202,  205,  263,  289,  289,  204,  301,  291,
      303,  308,  308,  301,  308,  310,  312,  313,  314,  206,
      291,  303,  311,  311,  291,  404,  311,  315,  404,  411,
      412,  414,  411,  413,  413,  415,  415,  452,  485,  494,
      558,  491,  452,  485,  491,  313,  495,  495,  496,  497,
      497,  536,  562,  314,  312,  315,  538,  538,  573,  536,
      539,  539,  497,  497,  497,  497,  573,  412,  560,  560,
      563,  563,  601,  601,  414,  496,  558,  606,  607,  607,

      562,  614,  494,  563,  563,  563,  563,  608,  608,  643,
      668,  608,  644,  644,  645,  614,  720,  645,  670,  670,
      672,  734,  606,  672,  691,  691,  708,  708,  731,  730,
      729,  724,  723,  722,  721,  717,  716,  643,  714,  708,
      713,  712,  711,  709,  707,  706,  705,  704,  703,  702,
      668,  700,  699,  697,  694,  693,  692,  689,  688,  686,
      685,  684,  720,  727,  683,  682,  681,  680,  679,  678,
      676,  674,  673,  669,  665,  727,  727,  727,  727,  663,
      662,  660,  659,  727,  658,  657,  656,  727,  727,  727,
      727,  727,  727,  732,  655,  654,  653,  651,  650,  649,

      648,  647,  641,  640,  639,  732,  732,  732,  732,  638,
      636,  635,  633,  732,  627,  626,  625,  732,  732,  732,
      732,  732,  732,  738,  624,  623,  621,  620,  619,  616,
      615,  613,  612,  609,  604,  738,  738,  738,  738,  603,
      600,  599,  598,  738,  597,  596,  595,  738,  738,  738,
      738,  738,  738,  743,  743,  743,  743,  744,  744,  744,
      744,  745,  745,  745,  745,  746,  746,  747,  593,  747,
      747,  748,  748,  748,  748,  749,  749,  749,  749,  750,
      750,  750,  750,  752,  752,  752,  752,  753,  753,  753,
      753,  754,  754,  754,  754,  755,  755,  755,  755,  756,

      756,  756,  756,  757,  757,  757,  757,  758,  758,  758,
      758,  759,  759,  759,  759,  760,  760,  760,  760,  761,
      761,  761,  761,  762,  762,  762,  762,  592,  591,  590,
      589,  588,  587,  586,  585,  584,  583,  582,  581,  580,
      579,  577,  575,  574,  571,  570,  569,  565,  564,  559,
      556,  555,  554,  553,  552,  551,  550,  549,  548,  546,
      545,  544,  543,  541,  537,  535,  533,  532,  531,  530,
      528,  527,  526,  525,  524,  523,  522,  520,  517,  516,
      510,  508,  505,  504,  500,  499,  498,  493,  492,  489,
      487,  486,  484,  483,  481,  480,  479,  478,  477,  476,

      474,  472,  471,  470,  469,  467,  466,  464,  463,  462,
      459,  458,  457,  456,  455,  453,  451,  450,  449,  448,
      446,  445,  443,  441,  440,  439,  438,  437,  436,  435,
      434,  433,  432,  431,  430,  428,  426,  424,  423,  422,
      416,  410,  409,  408,  406,  403,  402,  401,  400,  399,
      398,  397,  396,  395,  393,  392,  391,  390,  389,  388,
      387,  386,  385,  384,  383,  380,  379,  378,  377,  376,
      375,  374,  373,  371,  370,  368,  367,  366,  365,  363,
      362,  361,  360,  359,  358,  357,  355,  353,  351,  350,
      349,  348,  347,  346,  345,  344,  343,  342,  341,  340,

      339,  336,  333,  332,  331,  330,  327,  326,  325,  324,
      323,  319,  318,  317,  316,  309,  307,  306,  305,  304,
      302,  300,  299,  298,  297,  296,  295,  293,  292,  290,
      288,  287,  286,  283,  282,  281,  280,  279,  278,  277,
      275,  274,  273,  272,  270,  269,  268,  267,  266,  265,
      262,  261,  260,  259,  258,  257,  256,  255,  254,  253,
      252,  250,  249,  248,  247,  245,  244,  242,  241,  240,
      239,  237,  236,  235,  234,  233,  231,  230,  229,  228,
      226,  225,  224,  223,  222,  221,  220,  218,  217,  216,
      215,  214,  213,  211,  208,  207,  197,  196,  195,  193,

      192,  190,  188,  187,  186,  185,  184,  182,  181,  180,
      176,  175,  174,  173,  171,  170,  167,  166,  165,  163,
      162,  160,  159,  158,  157,  156,  155,  149,  147,  146,
      145,  144,  143,  142,  140,  139,  137,  136,  135,  132,
      131,  130,  129,  128,  126,  125,  124,  123,  122,  121,
      120,  119,  118,  117,  114,  113,  112,  111,  110,  109,
      108,  107,  106,   96,   94,   81,   79,   65,   56,   53,
       52,   49,   45,   43,   35,   32,   31,   29,   25,   23,
       22,   21,   20,   17,   13,   12,   11,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,

      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "uclex.ll"
#line 2 "uclex.ll"
/**
 **	Uclex.ll - Usecode lexical scanner.
 **
 **	Written: 12/30/2000 - JSF
 **/

/*
Copyright (C) 2000 The Exult Team

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*/

#include <string>
#include <cstring>
#include <vector>
#include <set>
#include "ucparse.h"
#include "ucloc.h"
#include "ucfun.h"

using std::string;

extern std::vector<char *> include_dirs;	// -I directories.

/*
 *	Want a stack of files for implementing '#include'.
 */
std::vector<Uc_location *> locstack;
std::vector<YY_BUFFER_STATE> bufstack;
std::set<string> inclfiles;

/*
 *	Parse out a name in quotes.
 *
 *	Output:	->name, with a null replacing the ending quote.
 *		0 if not found.
 */

static char *Find_name
	(
	char *name,
	char *& ename			// ->null at end of name returned.
	)
	{
	while (*name && *name != '"')	// Find start of filename.
		name++;
	if (!*name)
		return 0;
	name++;				// Point to name.
	ename = name;			// Find end.
	while (*ename && *ename != '"')
		ename++;
	if (!*ename)
		return 0;
	*ename = 0;
	return name;
	}

/*
 *	Set location from a preprocessor string.
 */

static void Set_location
	(
	char *text			// ->first digit of line #.
	)
	{
	char *name;
	int line = strtol(text, &name, 10);
	char *ename;
	name = Find_name(name, ename);
	if (!name)
		return;
//cout << "Setting location at line " << line - 1 << endl;
					// We're 0-based.
	Uc_location::set_cur(name, line - 1);
	*name = '"';			// Restore text.
	}

/*
 *	Include another source. Each file is included ONCE.
 */

static void Include
	(
	char *yytext			// ->text containing name.
	)
	{
	char msg[180];
	if (bufstack.size() > 20)
		{
		Uc_location::yyerror("#includes are nested too deeply");
		exit(1);
		}
	char *ename;
	char *name = Find_name(yytext, ename);
	if (!name)
		{
		Uc_location::yyerror("No file in #include");
		return;
		}
					// Check if file has already been included.
	std::set<string>::iterator it = inclfiles.find(name);
	if (it != inclfiles.end())
		return;
	locstack.push_back(new Uc_location());
	bufstack.push_back(YY_CURRENT_BUFFER);
	yyin = fopen(name, "r");
					// Look in -I list if not found here.
	for (std::vector<char *>::const_iterator it = include_dirs.begin();
				!yyin && it != include_dirs.end(); ++it)
		{
		string path(*it);
		path += '/';
		path += name;
		yyin = fopen(path.c_str(), "r");
		}
	if (!yyin)
		{
		sprintf(msg, "Can't open '%s'", name);
		Uc_location::yyerror(msg);
		exit(1);
		}
					// Add file to list of included files.
	inclfiles.insert(name);
					// Set location to new file.
	Uc_location::set_cur(name, 0);
	yy_switch_to_buffer(yy_create_buffer(yyin,YY_BUF_SIZE));
	}

/*
 *	Handle #game directive.
 */

static void Set_game
	(
	char *yytext			// Contains name.
	)
	{
	char *ename;
	char *name = Find_name(yytext, ename);
	if (!name)
		Uc_location::yyerror("No name in #game");
	else if (strcmp(name, "blackgate") == 0)
		Uc_function::set_intrinsic_type(Uc_function::bg);
	else if (strcmp(name, "serpentisle") == 0)
		Uc_function::set_intrinsic_type(Uc_function::si);
	else
		Uc_location::yyerror(
			"Specify \"blackgate\" or \"serpentisle\" "
				"with #game.");
	}

/*
 *	Handle #autonumber directive
 */

static void Set_autonum
	(
	char *text		// Contains number.
	)
	{
	char *name;
	int fun_number = strtol(text, &name, 0);
	if (fun_number<=0)
		Uc_location::yyerror("Starting function number too low in #autonumber");
	
	Uc_function_symbol::set_last_num(fun_number - 1);
	}

/*
 *	Make a copy of a string, interpreting '\' codes.
 *
 *	Output:	->allocated string.
 */

char *Handle_string
	(
	const char *from			// Ends with a '"'.
	)
	{
	char *to = new char[1 + strlen(from)];	// (Bigger than needed.)
	char *str = to;

	while (*from && *from != '\"')
		{
		if (*from != '\\')
			{
			*to++ = *from++;
			continue;
			}
		switch (*++from)
			{
		case 'n':
			*to++ = '\n'; break;
		case 't':
			*to++ = '\t'; break;
		case 'r':
			*to++ = '\r'; break;
		case '\"':
		case '\'':
		case '\\':
			*to++ = *from; break;
		default:
			{
			char buf[150];
			sprintf(buf, "Unknown escape sequence '\\%c'. If you are trying "
			             "to insert a literal backslash ('\\') into text, "
			             "write it as '\\\\'.", *from);
			Uc_location::yywarning(buf);
			*to++ = '\\';
			*to++ = *from; break;
			}
			}
		++from;
		}
	*to = 0;
	return str;
	}

extern "C" int yywrap() { return 1; }		/* Stop at EOF. */






#line 1176 "uclex.cc"

#define INITIAL 0
#define comment 1
#define fun_id 2
#define in_script 3
#define in_loop 4
#define in_breakable 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 245 "uclex.ll"


#line 1381 "uclex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 743 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 988 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 247 "uclex.ll"
return IF;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 248 "uclex.ll"
return ELSE;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 249 "uclex.ll"
return RETURN;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 250 "uclex.ll"
return WHILE;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 251 "uclex.ll"
return DO;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 252 "uclex.ll"
return FOR;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 253 "uclex.ll"
return UCC_IN;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 254 "uclex.ll"
return WITH;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 255 "uclex.ll"
return TO;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 256 "uclex.ll"
return VAR;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 257 "uclex.ll"
return VOID;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 258 "uclex.ll"
return ALIAS;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 259 "uclex.ll"
return STRUCT;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 260 "uclex.ll"
return UCC_INT;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 261 "uclex.ll"
return UCC_CHAR;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 262 "uclex.ll"
return UCC_CHAR;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 263 "uclex.ll"
return UCC_LONG;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 264 "uclex.ll"
return UCC_CONST;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 265 "uclex.ll"
return STRING;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 266 "uclex.ll"
return ENUM;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 267 "uclex.ll"
return EXTERN;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 268 "uclex.ll"
return UCTRUE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 269 "uclex.ll"
return UCFALSE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 270 "uclex.ll"
return CASE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 271 "uclex.ll"
return STATIC_;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 272 "uclex.ll"
return CLASS;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 273 "uclex.ll"
return NEW;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 274 "uclex.ll"
return DELETE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 275 "uclex.ll"
return SWITCH;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 276 "uclex.ll"
return DEFAULT;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 278 "uclex.ll"
return CONVERSE;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 279 "uclex.ll"
return CHOICE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 280 "uclex.ll"
return NESTED;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 281 "uclex.ll"
return SAY;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 282 "uclex.ll"
return REMOVE;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 283 "uclex.ll"
return ADD;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 284 "uclex.ll"
return HIDE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 285 "uclex.ll"
return RUNSCRIPT;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 286 "uclex.ll"
return MESSAGE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 287 "uclex.ll"
return RESPONSE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 288 "uclex.ll"
return SCRIPT;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 289 "uclex.ll"
return AFTER;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 290 "uclex.ll"
return TICKS;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 291 "uclex.ll"
return MINUTES;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 292 "uclex.ll"
return HOURS;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 293 "uclex.ll"
return EVENT;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 294 "uclex.ll"
return FLAG;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 295 "uclex.ll"
return ITEM;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 296 "uclex.ll"
return GOTO;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 297 "uclex.ll"
return ABORT;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 298 "uclex.ll"
return ORIGINAL;
	YY_BREAK

case 52:
YY_RULE_SETUP
#line 300 "uclex.ll"
return SHAPENUM;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 301 "uclex.ll"
return OBJECTNUM;
	YY_BREAK


case 54:
YY_RULE_SETUP
#line 305 "uclex.ll"
return BREAK;
	YY_BREAK


case 55:
YY_RULE_SETUP
#line 308 "uclex.ll"
return BREAK;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 309 "uclex.ll"
return CONTINUE;
	YY_BREAK

/* Script commands. */

case 57:
YY_RULE_SETUP
#line 313 "uclex.ll"
return NOP;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 314 "uclex.ll"
return NOHALT;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 315 "uclex.ll"
return NEXT;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 316 "uclex.ll"
return FINISH;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 317 "uclex.ll"
return RESURRECT;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 318 "uclex.ll"
return CONTINUE;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 319 "uclex.ll"
return RESET;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 320 "uclex.ll"
return REPEAT;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 321 "uclex.ll"
return WAIT;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 322 "uclex.ll"
return RISE;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 323 "uclex.ll"
return DESCEND;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 324 "uclex.ll"
return FRAME;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 325 "uclex.ll"
return HATCH;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 326 "uclex.ll"
return SETEGG;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 327 "uclex.ll"
return PREVIOUS;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 328 "uclex.ll"
return CYCLE;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 329 "uclex.ll"
return STEP;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 330 "uclex.ll"
return MUSIC;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 331 "uclex.ll"
return CALL;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 332 "uclex.ll"
return SPEECH;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 333 "uclex.ll"
return SFX;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 334 "uclex.ll"
return FACE;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 335 "uclex.ll"
return WEATHER;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 336 "uclex.ll"
return HIT;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 337 "uclex.ll"
return ATTACK;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 338 "uclex.ll"
return NEAR;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 339 "uclex.ll"
return FAR;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 340 "uclex.ll"
return ACTOR;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 341 "uclex.ll"
return NORTH;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 342 "uclex.ll"
return SOUTH;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 343 "uclex.ll"
return EAST;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 344 "uclex.ll"
return WEST;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 345 "uclex.ll"
return NW;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 346 "uclex.ll"
return NE;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 347 "uclex.ll"
return SW;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 348 "uclex.ll"
return SE;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 349 "uclex.ll"
return STANDING;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 350 "uclex.ll"
return STEP_RIGHT;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 351 "uclex.ll"
return STEP_LEFT;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 352 "uclex.ll"
return READY;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 353 "uclex.ll"
return RAISE_1H;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 354 "uclex.ll"
return REACH_1H;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 355 "uclex.ll"
return STRIKE_1H;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 356 "uclex.ll"
return RAISE_2H;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 357 "uclex.ll"
return REACH_2H;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 358 "uclex.ll"
return STRIKE_2H;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 359 "uclex.ll"
return SITTING;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 360 "uclex.ll"
return BOWING;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 361 "uclex.ll"
return KNEELING;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 362 "uclex.ll"
return SLEEPING;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 363 "uclex.ll"
return CAST_UP;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 364 "uclex.ll"
return CAST_OUT;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 365 "uclex.ll"
return CACHED_IN;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 366 "uclex.ll"
return PARTY_NEAR;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 367 "uclex.ll"
return AVATAR_NEAR;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 368 "uclex.ll"
return AVATAR_FAR;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 369 "uclex.ll"
return AVATAR_FOOTPAD;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 370 "uclex.ll"
return PARTY_FOOTPAD;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 371 "uclex.ll"
return SOMETHING_ON;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 372 "uclex.ll"
return EXTERNAL_CRITERIA;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 373 "uclex.ll"
return NORMAL_DAMAGE;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 374 "uclex.ll"
return FIRE_DAMAGE;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 375 "uclex.ll"
return MAGIC_DAMAGE;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 376 "uclex.ll"
return LIGHTNING_DAMAGE;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 377 "uclex.ll"
return ETHEREAL_DAMAGE;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 378 "uclex.ll"
return SONIC_DAMAGE;
	YY_BREAK

case 123:
YY_RULE_SETUP
#line 382 "uclex.ll"
return AND;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 383 "uclex.ll"
return OR;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 384 "uclex.ll"
return NOT;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 386 "uclex.ll"
{
			yylval.strval = strdup(yytext);
			return IDENTIFIER;
			}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 390 "uclex.ll"
{
					// Remove ending quote.
			yylval.strval = Handle_string(yytext + 1);
			return STRING_LITERAL;
			}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 395 "uclex.ll"
{
					// Remove ending quote and asterisk.
			yylval.strval = strdup(yytext + 1);
			yylval.strval[strlen(yylval.strval) - 2] = 0;
			return STRING_PREFIX;
			}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 401 "uclex.ll"
{
			yylval.intval = atoi(yytext);
			return INT_LITERAL;
			}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 405 "uclex.ll"
{
			yylval.intval = strtol(yytext + 2, 0, 16);
			return INT_LITERAL;
			}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 410 "uclex.ll"
{ return EQUALS; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 411 "uclex.ll"
{ return NEQUALS; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 412 "uclex.ll"
{ return LTEQUALS; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 413 "uclex.ll"
{ return GTEQUALS; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 414 "uclex.ll"
{ return UCC_POINTS; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 415 "uclex.ll"
{ return UCC_SCOPE; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 416 "uclex.ll"
{ return UCC_INSERT; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 417 "uclex.ll"
{ return ADD_EQ; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 418 "uclex.ll"
{ return SUB_EQ; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 419 "uclex.ll"
{ return MUL_EQ; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 420 "uclex.ll"
{ return DIV_EQ; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 421 "uclex.ll"
{ return MOD_EQ; }
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 423 "uclex.ll"
{ Set_location(yytext + 2); Uc_location::increment_cur_line(); }
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 424 "uclex.ll"
{ Set_location(yytext + 6); Uc_location::increment_cur_line(); }
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 425 "uclex.ll"
{ Uc_location::increment_cur_line(); Include(yytext + 8); }
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 426 "uclex.ll"
{ Set_game(yytext + 5); Uc_location::increment_cur_line(); }
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 427 "uclex.ll"
{ Set_autonum(yytext + 11); Uc_location::increment_cur_line(); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 429 "uclex.ll"
{ Uc_location::yyerror("Directives require a terminating new-line character before the end of file"); }
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 430 "uclex.ll"
{ Uc_location::yywarning("Unknown directive is being ignored"); Uc_location::increment_cur_line(); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 432 "uclex.ll"
/* Ignore spaces. */
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 433 "uclex.ll"
/* Comments. */
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 434 "uclex.ll"
Uc_location::increment_cur_line();
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 435 "uclex.ll"
yy_push_state(comment);
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 437 "uclex.ll"
/* All but '*'. */
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 438 "uclex.ll"
Uc_location::increment_cur_line();
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 439 "uclex.ll"
/* *'s not followed by '/'. */
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 440 "uclex.ll"
Uc_location::increment_cur_line();
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 441 "uclex.ll"
yy_pop_state();
	YY_BREAK
case YY_STATE_EOF(comment):
#line 442 "uclex.ll"
{ Uc_location::yyerror("Comment not terminated");
								yyterminate(); }
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 444 "uclex.ll"
Uc_location::increment_cur_line();
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 445 "uclex.ll"
return *yytext;		/* Being lazy. */
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(fun_id):
case YY_STATE_EOF(in_script):
case YY_STATE_EOF(in_loop):
case YY_STATE_EOF(in_breakable):
#line 446 "uclex.ll"
{
			if (locstack.empty())
				yyterminate();
			else		// Restore buffer and location.
				{
				Uc_location *loc = locstack.back();
				locstack.pop_back();
				const char *nm = loc->get_source();
				loc->set_cur(nm, loc->get_line());
				delete loc;
				// Close currently opened file.
				if (yyin && yyin != stdin && bufstack.size()) fclose(yyin);
				yy_delete_buffer(YY_CURRENT_BUFFER);
				yy_switch_to_buffer(bufstack.back());
				bufstack.pop_back();
				}
			}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 464 "uclex.ll"
ECHO;
	YY_BREAK
#line 2337 "uclex.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 743 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 743 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 742);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 464 "uclex.ll"



/*
 *	Start/end 'script' mode.
 */
void start_script()
	{
	yy_push_state(in_script);
	}
void end_script()
	{
	yy_pop_state();
	}
void start_loop()
	{
	yy_push_state(in_loop);
	}
void end_loop()
	{
	yy_pop_state();
	}
void start_breakable()
	{
	yy_push_state(in_breakable);
	}
void end_breakable()
	{
	yy_pop_state();
	}
void start_fun_id()
	{
	yy_push_state(fun_id);
	}
void end_fun_id()
	{
	yy_pop_state();
	}

